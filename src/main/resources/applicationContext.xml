<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">


    <description>Spring公共配置</description>
    <!--************************* Params Start *************************-->

    <!-- 读取系统参数配置文件 -->
    <bean id="jdbc" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <array>
                <value>classpath:jdbc.properties</value>
            </array>
        </property>
    </bean>

    <!-- param.properties, Properties属性注入 -->
    <bean id="paramConfigs" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:param.properties</value>
            </list>
        </property>
    </bean>

    <!-- 读取数据库参数配置文件 -->
    <!--<util:properties id="jdbc" location="classpath:jdbc.properties"/>-->

    <!--************************* Params Edn *************************-->






    <!--************************* Spring Application Start *************************-->

    <!-- 启动@AspectJ支持 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 设置自动搜索目录 -->
    <context:component-scan base-package="com.szq.demo.*"/>

    <!--************************* Spring Application End *************************-->


    <!--************************* Spring MVC Start *************************-->


    <!-- 支持@RequestMapping请求和Controller映射 -->
    <mvc:annotation-driven/>

    <!-- jsp页面跳转配置 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>    <!-- JSON转换器 -->
            </list>
        </property>
    </bean>

    <!-- 上传文件 -->
    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
        <!--<property name="defaultEncoding" value="utf-8"/>-->
        <!--&lt;!&ndash; 最大内存大小 &ndash;&gt;-->
        <!--<property name="maxInMemorySize" value="10240"/>-->
        <!--&lt;!&ndash; 最大文件大小，-1为不限制大小 &ndash;&gt;-->
        <!--<property name="maxUploadSize" value="-1"/>-->
    <!--</bean>-->

    <!--************************* Spring MVC End *************************-->


    <!--************************* MyBatis Start *************************-->


    <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"-->
          <!--destroy-method="close">-->
        <!--<property name="driverClassName" value="${jdbc.driver}"/>-->
        <!--<property name="url" value="${jdbc.url}"/>-->
        <!--<property name="username" value="${jdbc.username}"/>-->
        <!--<property name="password" value="${jdbc.password}"/>-->
        <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
        <!--<property name="initialSize" value="${jdbc.initialSize}"></property>-->
        <!--&lt;!&ndash; 连接池最大数量 &ndash;&gt;-->
        <!--<property name="maxActive" value="${jdbc.maxActive}"></property>-->
        <!--&lt;!&ndash; 连接池最大空闲 &ndash;&gt;-->
        <!--<property name="maxIdle" value="${jdbc.maxIdle}"></property>-->
        <!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
        <!--<property name="minIdle" value="${jdbc.minIdle}"></property>-->
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="${jdbc.maxWait}"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; spring和MyBatis完美整合，不需要mybatis的配置映射文件 &ndash;&gt;-->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--&lt;!&ndash; 自动扫描mapping.xml文件 &ndash;&gt;-->
        <!--<property name="mapperLocations" value="classpath:com/.../dao/*.xml"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; DAO接口所在包名，Spring会自动查找其下的类 &ndash;&gt;-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="com......dao"/>-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; (事务管理)transaction manager, use JtaTransactionManager for global tx &ndash;&gt;-->
    <!--<bean id="transactionManager"-->
          <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->

    <!--************************* MyBatis End *************************-->


    <!--&lt;!&ndash; production环境 &ndash;&gt;-->
    <!--<beans profile="production">-->
    <!--<context:property-placeholder ignore-unresolvable="true" file-encoding="utf-8"-->
    <!--location="classpath:dbconfig.properties" />-->
    <!--</beans>-->

    <!--&lt;!&ndash;del rmq&ndash;&gt;-->
    <!--<bean id="delProdConsumer" class="com.web.core.tool.MQ.MQExConsumerDelProd">-->
        <!--<constructor-arg name="endpointName" value=""/>-->
        <!--<constructor-arg name="bindKey" value="${rmq.delProdBindKey}"/>-->
        <!--<constructor-arg name="exName" value="${rmq.delExName}"/>-->
        <!--<constructor-arg name="exType" value="${rmq.delExType}"/>-->
        <!--<constructor-arg name="host" value="${rmq.host}"/>-->
        <!--<constructor-arg name="port" value="${rmq.port}"/>-->
        <!--<constructor-arg name="userName" value="${rmq.username}"/>-->
        <!--<constructor-arg name="password" value="${rmq.passwd}"/>-->
    <!--</bean>-->
    <!--<bean id="delImgConsumer" class="com.web.core.tool.MQ.MQConsumerDelImg">-->
        <!--<constructor-arg name="endpointName" value=""/>-->
        <!--<constructor-arg name="bindKey" value="${rmq.delImgBindKey}"/>-->
        <!--<constructor-arg name="exName" value="${rmq.delExName}"/>-->
        <!--<constructor-arg name="exType" value="${rmq.delExType}"/>-->
        <!--<constructor-arg name="host" value="${rmq.host}"/>-->
        <!--<constructor-arg name="port" value="${rmq.port}"/>-->
        <!--<constructor-arg name="userName" value="${rmq.username}"/>-->
        <!--<constructor-arg name="password" value="${rmq.passwd}"/>-->
    <!--</bean>-->
    <!--<bean id="mqDelProducer" class="com.web.core.tool.MQ.MQDelProducer">-->
        <!--<constructor-arg name="exName" value="${rmq.delExName}"/>-->
        <!--<constructor-arg name="exType" value="${rmq.delExType}"/>-->
        <!--<constructor-arg name="host" value="${rmq.host}"/>-->
        <!--<constructor-arg name="port" value="${rmq.port}"/>-->
        <!--<constructor-arg name="userName" value="${rmq.username}"/>-->
        <!--<constructor-arg name="password" value="${rmq.passwd}"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash;redis&ndash;&gt;-->
    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
        <!--<property name="maxTotal" value="${redis.pool.maxTotal}" />-->
        <!--<property name="minIdle" value="${redis.pool.minIdle}" />-->
        <!--<property name="maxIdle" value="${redis.pool.maxIdle}" />-->
        <!--<property name="maxWaitMillis" value="${redis.pool.maxWait}" />-->
        <!--<property name="testWhileIdle" value="${redis.pool.testWhileIdle}" />-->
        <!--<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />-->
        <!--<property name="testOnReturn" value="${redis.pool.testOnReturn}" />-->
    <!--</bean>-->

    <!--<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">-->
        <!--<constructor-arg index="0" ref="jedisPoolConfig" />-->
        <!--<constructor-arg index="1">-->
            <!--<list>-->
                <!--<bean class="redis.clients.jedis.JedisShardInfo">-->
                    <!--<constructor-arg index="0" value="${redis1.ip}" />-->
                    <!--<constructor-arg index="1" value="${redis1.port}" type="int" />-->
                <!--</bean>-->
                <!--&lt;!&ndash;<bean class="redis.clients.jedis.JedisShardInfo">&ndash;&gt;-->
                <!--&lt;!&ndash;<constructor-arg index="0"&ndash;&gt;-->
                <!--&lt;!&ndash;value="${redis2.ip}" />&ndash;&gt;-->
                <!--&lt;!&ndash;<constructor-arg index="1" value="${redis.port}" type="int" />&ndash;&gt;-->
                <!--&lt;!&ndash;</bean>&ndash;&gt;-->
            <!--</list>-->
        <!--</constructor-arg>-->
    <!--</bean>-->

    <!--<bean id="redisClient" class="com.web.core.kv.RedisClient">-->
        <!--<constructor-arg name="pool" ref="shardedJedisPool" />-->
    <!--</bean>-->

</beans>